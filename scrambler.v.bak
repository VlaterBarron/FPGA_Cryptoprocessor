//1 + x^3 + x^15 + x^16

module scrambler
#(parameter N = 16)(
	input clk, rst, en,
	input [N-1:0] seed, data_in,
	output wire [N-1:0] data_out
);

reg [N-1:0] lfsr_r, data_scram;

always @(posedge clk or negedge rst)
	begin
		if(!rst)
			begin
				lfsr_r <= 16'b1111111111111111;
				data_scram <= 16'b1111111111111111;
			end
		else if(en)
			begin
				data_scram <= lfsr_r;
				lfsr_r <= seed;
			end
		else
			lfsr_r <= {lfsr_r[N-1:0], lfsr_r[N-1] ^ lfsr_r[N-2] ^ lfsr_r[2]};
	end
	
assign data_out = data_scram ^ data_in;

endmodule
